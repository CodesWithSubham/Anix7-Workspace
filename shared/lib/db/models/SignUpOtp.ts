import { Schema, Model, Document, Connection } from "mongoose";
import connectToUserDb from "../connections/userDb";

// Define the TypeScript interface for SignUpOtp documents
export interface ISignUpOtp extends Document {
  firstName: string; // User's first name
  lastName: string | null; // User's last name (nullable)
  email: string; // Unique email (lowercased)
  lastTry: Date | null; // Last OTP try time
  otp: string; // OTP value
  firstTry: Date | null; // First OTP try time
  totalTries: number; // Total number of OTP sends
  totalInputTries: number; // Total number of OTP inputs
  createdAt: Date; // Auto-generated by timestamps
  updatedAt: Date; // Auto-generated by timestamps
}

// Define the schema with validations & defaults
const signUpOtpSchema = new Schema<ISignUpOtp>(
  {
    firstName: { type: String, required: true }, // User's first name
    lastName: { type: String, default: null }, // User's last name (nullable)
    email: { type: String, required: true, unique: true, lowercase: true }, // Unique email
    lastTry: { type: Date, default: null }, // Default to null if not provided
    otp: { type: String, required: true }, // OTP value
    firstTry: { type: Date, default: null }, // Default to null if not provided
    totalTries: { type: Number, default: 0 }, // Default to 0 if not provided
    totalInputTries: { type: Number, default: 0 }, // Default to 0 if not provided
  },
  { timestamps: true } // Automatically handles createdAt and updatedAt
);

// Using mongoose models and checking for existing models to prevent overwriting
let cachedModel: Model<ISignUpOtp> | null = null;

export default async function getSignUpOtpModel(): Promise<Model<ISignUpOtp>> {
  const conn: Connection = await connectToUserDb();
  if (!cachedModel) {
    cachedModel = conn.models.SignUpOtp || conn.model<ISignUpOtp>("SignUpOtp", signUpOtpSchema);
  }
  return cachedModel;
}
