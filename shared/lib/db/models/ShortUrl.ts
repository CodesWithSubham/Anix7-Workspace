import { Schema, Model, Document, Connection } from "mongoose";
import connectToShortUrlDb from "../connections/shortUrlDb";

// Define the TypeScript interface for ShortUrl documents
export interface IShortUrl extends Document {
  alias: string; // Alias of 6 characters
  longUrl: string; // The original long URL
  uploadedBy: number; // References User's userId
  adsLabel: 0 | 1 | 2 | 3; // Ads label: 0, 1, 2, or 3
  expiredAt: Date | null; // Default to null if not provided
  createdAt: Date; // Auto-generated by timestamps
  updatedAt: Date; // Auto-generated by timestamps
}

// Define the schema with validations & defaults
const shortUrlSchema = new Schema<IShortUrl>(
  {
    alias: {
      type: String,
      required: true,
      minlength: 6,
      maxlength: 6,
      unique: true,
    }, // Alias of 6 characters
    longUrl: { type: String, required: true }, // Original long URL
    uploadedBy: { type: Number, required: true, ref: "User" }, // References User's userId
    adsLabel: { type: Number, enum: [0, 1, 2, 3], default: 1 }, // Ads label: 0, 1, 2, or 3
    expiredAt: { type: Date, default: null }, // Default to null if not provided
  },
  { timestamps: true } // Automatically handles createdAt and updatedAt
);

// Using mongoose models and checking for existing models to prevent overwriting
let cachedModel: Model<IShortUrl> | null = null;

export default async function getShortUrlModel(): Promise<Model<IShortUrl>> {
  const conn: Connection = await connectToShortUrlDb();
  if (!cachedModel) {
    cachedModel = conn.models.ShortUrl || conn.model<IShortUrl>("ShortUrl", shortUrlSchema);
  }
  return cachedModel;
}
